// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Notification Service
 *
 * Endpoint definition for a service processing notifications. See [OpenAPI Specification V3.0.3](https://swagger.io/specification/v3/)
 *
 * API version: 1.0.0
 * Contact: thomklic@gmail.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// NotificationAPIController binds http requests to an api service and writes the service results to the http response
type NotificationAPIController struct {
	service NotificationAPIServicer
	errorHandler ErrorHandler
}

// NotificationAPIOption for how the controller is set up.
type NotificationAPIOption func(*NotificationAPIController)

// WithNotificationAPIErrorHandler inject ErrorHandler into controller
func WithNotificationAPIErrorHandler(h ErrorHandler) NotificationAPIOption {
	return func(c *NotificationAPIController) {
		c.errorHandler = h
	}
}

// NewNotificationAPIController creates a default api controller
func NewNotificationAPIController(s NotificationAPIServicer, opts ...NotificationAPIOption) *NotificationAPIController {
	controller := &NotificationAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NotificationAPIController
func (c *NotificationAPIController) Routes() Routes {
	return Routes{
		"PostNotification": Route{
			strings.ToUpper("Post"),
			"/notification",
			c.PostNotification,
		},
	}
}

// PostNotification - Receives notification
func (c *NotificationAPIController) PostNotification(w http.ResponseWriter, r *http.Request) {
	notificationParam := Notification{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&notificationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNotificationRequired(notificationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNotificationConstraints(notificationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostNotification(r.Context(), notificationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
